---
import LanguageToggle from './LanguageToggle';
import { getLocaleAndTranslations } from '../../utils/i18n';

const currentPath = Astro.url.pathname;
const locale = Astro.currentLocale || 'es';
const { t } = getLocaleAndTranslations(locale);

// Crear prefijo de idioma para las URLs
const localePrefix = locale === 'es' ? '/es' : '/en';

// Actualizar las rutas con el prefijo de idioma
const navItems = [
  { label: t('nav.home'), path: `${localePrefix}/` },
  { label: t('nav.apiPricing'), path: `${localePrefix}/api-pricing` },
  { label: t('nav.individualPricing'), path: `${localePrefix}/individual-pricing` },
  { label: t('nav.codeEditors'), path: `${localePrefix}/code-editors` }
];

const isCurrentPath = (itemPath: string) => {
  return currentPath === itemPath;
};
---

<header class="bg-white shadow-sm">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex items-center">
        <a href={`${localePrefix}/`} class="flex-shrink-0 flex items-center">
          <span class="text-blue-600 font-bold text-xl">AI Pricing</span>
        </a>
        <nav class="hidden md:ml-6 md:flex space-x-4">
          {navItems.map(item => (
            <a 
              href={item.path}
              class={`px-3 py-2 rounded-md text-sm font-medium ${
                currentPath === item.path
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              {item.label}
            </a>
          ))}
        </nav>
      </div>
      <div class="flex items-center">
        <LanguageToggle client:load currentLocale={locale} />
      </div>
      
      <!-- Mobile menu button -->
      <div id="mobile-menu" class="hidden md:hidden">
        <div class="px-2 pt-2 pb-3 space-y-1">
          {navItems.map(item => (
            <a 
              href={item.path}
              class={`block px-3 py-2 rounded-md text-base font-medium ${
                isCurrentPath(item.path)
                  ? 'bg-blue-100 text-blue-700'
                  : 'text-gray-700 hover:bg-gray-100'
              }`}
            >
              {item.label}
            </a>
          ))}
        </div>
      </div>
    </header>
    
    <script>
      const menuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      
      if (menuButton && mobileMenu) {
        menuButton.addEventListener('click', () => {
          const expanded = menuButton.getAttribute('aria-expanded') === 'true';
          menuButton.setAttribute('aria-expanded', (!expanded).toString());
          mobileMenu.classList.toggle('hidden');
        });
      }
    </script>