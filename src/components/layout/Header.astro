---
import LanguageToggle from './LanguageToggle';
import { getLocaleAndTranslations } from '../../utils/i18n';
import ThemeToggle from '../ThemeToggle.astro';

const currentPath = Astro.url.pathname;
const locale = Astro.currentLocale || 'es';
const { t } = getLocaleAndTranslations(locale);

// Crear prefijo de idioma para las URLs
const localePrefix = locale === 'es' ? '/es' : '/en';

// Actualizar las rutas con el prefijo de idioma
const navItems = [
  { label: t('nav.home'), path: `${localePrefix}/` },
  { label: t('nav.apiPricing'), path: `${localePrefix}/api-pricing` },
  { label: t('nav.individualPricing'), path: `${localePrefix}/individual-pricing` },
  { label: t('nav.codeEditors'), path: `${localePrefix}/code-editors` }
];

const isCurrentPath = (itemPath: string) => {
  return currentPath === itemPath;
};
---
<header class="sticky top-0  z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
  <div class="flex h-16 px-16 items-center justify-between">
    <div class="font-bold text-2xl bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent">
      
      <a href=`/`>AI Pricing Hub</a>
    </div>
    <div class="flex items-center gap-4">
      <ThemeToggle />
      <LanguageToggle client:load currentLocale={locale as 'en' | 'es'} />
    </div>
  </div>
</header>

<!-- <header class="bg-white dark:bg-gray-900 shadow-sm transition-colors">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      
      <div class="flex items-center">
        <a href={`${localePrefix}/`} class="flex-shrink-0 flex items-center">
          <span class="text-blue-600 dark:text-blue-400 font-bold text-xl">AI Pricing</span>
        </a>
        <nav class="hidden md:ml-6 md:flex space-x-4">
          {navItems.map(item => (
            <a 
              href={item.path}
              class={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                currentPath === item.path
                  ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'
              }`}
              aria-current={currentPath === item.path ? 'page' : undefined}
            >
              {item.label}
            </a>
          ))}
        </nav>
      </div>
      
     
      <div class="flex items-center space-x-4">
        <ThemeToggle />
        <LanguageToggle client:load currentLocale={locale} />
        
        
        <button 
          type="button" 
          id="mobile-menu-button"
          class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Abrir menú principal</span>
          
          <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          
          <svg class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  
  <div id="mobile-menu" class="hidden md:hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 border-t dark:border-gray-700">
      {navItems.map(item => (
        <a 
          href={item.path}
          class={`block px-3 py-2 rounded-md text-base font-medium ${
            isCurrentPath(item.path)
              ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300'
              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'
          }`}
          aria-current={currentPath === item.path ? 'page' : undefined}
        >
          {item.label}
        </a>
      ))}
    </div>
  </div>
</header> -->

<!-- <script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIconOpen = menuButton?.querySelector('svg:first-child');
    const menuIconClose = menuButton?.querySelector('svg:last-child');
    
    if (menuButton && mobileMenu && menuIconOpen && menuIconClose) {
      menuButton.addEventListener('click', () => {
        const expanded = menuButton.getAttribute('aria-expanded') === 'true';
        menuButton.setAttribute('aria-expanded', (!expanded).toString());
        mobileMenu.classList.toggle('hidden');
        
        // Alternar entre iconos de menú
        menuIconOpen.classList.toggle('hidden');
        menuIconClose.classList.toggle('hidden');
      });
    }
  });
</script> -->