---
import Layout from "../../../layouts/Layout.astro";
import { getLocaleAndTranslations } from "../../../utils/i18n";
import type { SupportedLocale } from "../../../utils/i18n";
import { Calendar, Check, X } from "lucide-react";
import { getRelatedServices, getServiceById } from "@/lib/service";
import CompareButton from "../../../components/compare/CompareButton";
import ServiceDetailContainer from "../../../components/pricing/ServiceDetailContainer";
import BackButton from "@/components/ui/BackButton";
export const prerender = false;

const { locale: urlLocale, type, id } = Astro.params;
const locale =
  urlLocale === "es" || urlLocale === "en"
    ? urlLocale
    : ("es" as SupportedLocale);
const { t } = getLocaleAndTranslations(locale);

if (!id) {
  return Astro.redirect(`/${locale}/`);
}

const service = await getServiceById(id);
if (!service || !service.types.includes(type as any)) {
  return Astro.redirect(`/${locale}/`);
}

// Pasar el tipo actual a getRelatedServices
const relatedServices = await getRelatedServices(id, service.categories, 3, type as string);

// Filtrar los servicios relacionados para asegurar que solo se muestren los del mismo tipo
const filteredRelatedServices = relatedServices.filter(
  (relatedService) => relatedService.types.includes(type as any)
);

Astro.response.headers.set('Cache-Control', 'public, max-age=3600, stale-while-revalidate=7200');

const description =
  typeof service.description === "object" && service.description[locale]
    ? service.description[locale]
    : typeof service.description === "string"
      ? service.description
      : locale === "en"
        ? "Description not available in English"
        : "Descripción no disponible en español";

const features = Array.isArray(service.features)
  ? service.features
  : service.features[locale] || service.features["en"];

const typeTranslation = {
  api: locale === "es" ? "Servicios API" : "API Services",
  individual: locale === "es" ? "Uso Individual" : "Individual Use",
  "code-editor": locale === "es" ? "Editores de Código" : "Code Editors",
};

const featureLabels = {
  hasFree: locale === "es" ? "Nivel Gratuito" : "Free Tier",
  hasAPI: locale === "es" ? "Acceso API" : "API Access",
  commercialUse: locale === "es" ? "Uso Comercial" : "Commercial Use",
  customModels: locale === "es" ? "Modelos Personalizados" : "Custom Models",
};
---

<Layout
  title={`${service.name} ${t("meta.title")}`}
  description={`${description} - ${t("meta.description")}`}
  locale={locale}
>
  <div class="container mx-auto px-4 py-8 max-w-6xl">
    <BackButton {locale} client:load/>

    <ServiceDetailContainer client:load locale={locale}>
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Información principal -->
        <div class="lg:col-span-2 space-y-8">
          <div class="bg-card rounded-xl shadow-sm p-6 border border-border">
            <div class="flex items-start justify-between mb-4">
              <div>
                <div class="flex items-center gap-2 mb-2">
                  <span
                    class="px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary"
                  >
                    {
                      typeTranslation[
                        type as keyof typeof typeTranslation
                      ]
                    }
                  </span>
                  {
                    service.isNew && (
                      <span class="px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-500/10 text-green-500">
                        {locale === "es" ? "Nuevo" : "New"}
                      </span>
                    )
                  }
                </div>
                <h1 class="text-3xl font-bold">{service.name}</h1>
              </div>
            </div>

            <p class="text-muted-foreground mb-6">{description}</p>

            <div class="flex flex-wrap gap-2 mb-6">
              {
                service.categories.map((category: string) => (
                  <span class="px-2.5 py-0.5 rounded-full text-xs font-medium bg-secondary text-secondary-foreground">
                    {category}
                  </span>
                ))
              }
            </div>

            <div class="border-t border-border pt-6">
              <h2 class="text-xl font-semibold mb-4">
                {t("service.keyFeatures")}
              </h2>
              <ul class="grid grid-cols-1 md:grid-cols-2 gap-3">
                {
                  features.map((feature: string) => (
                    <li class="flex items-start">
                      <div class="mr-3 mt-1">
                        <div class="rounded-full bg-primary/10 p-1">
                          <Check className="h-3 w-3 text-primary" />
                        </div>
                      </div>
                      <span>{feature}</span>
                    </li>
                  ))
                }
              </ul>
            </div>
          </div>

          <!-- Información adicional -->
          <div class="bg-card rounded-xl shadow-sm p-6 border border-border">
            <h2 class="text-xl font-semibold mb-4">
              {t("service.additionalInfo")}
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-sm font-medium text-muted-foreground mb-2">
                  {t("service.releaseYear")}
                </h3>
                <div class="flex items-center">
                  <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
                  <span>{service.releaseYear}</span>
                </div>
              </div>

              <div>
                <h3 class="text-sm font-medium text-muted-foreground mb-2">
                  {t("service.availableFeatures")}
                </h3>
                <div class="space-y-2">
                  {
                    Object.entries({
                      hasFree: service.hasFree,
                      hasAPI: service.hasAPI,
                      commercialUse: service.commercialUse,
                      customModels: service.customModels,
                    }).map(([key, value]) => (
                      <div class="flex items-center">
                        {value ? (
                          <Check className="h-4 w-4 mr-2 text-green-500" />
                        ) : (
                          <X className="h-4 w-4 mr-2 text-red-500" />
                        )}
                        <span>
                          {featureLabels[key as keyof typeof featureLabels]}
                        </span>
                      </div>
                    ))
                  }
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Sidebar con precios -->
        <div class="lg:col-span-1">
          <div
            class="bg-card rounded-xl shadow-sm p-6 border border-border sticky top-6"
          >
            <h2 class="text-xl font-semibold mb-4">
              {t("service.pricingInfo")}
            </h2>

            <div class="mb-6">
              <!-- <div class="text-3xl font-bold">{service.price}</div> -->
              <div class="text-sm text-muted-foreground">
                {service.priceDetails}
              </div>
            </div>

            <div class="space-y-4">
              <a
                href="#"
                class="inline-flex items-center justify-center w-full bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md font-medium transition-colors"
              >
                {t("button.visitWebsite")}
              </a>

              <!-- Updated CompareButton with redirectToHome prop -->
              <CompareButton
                service={service}
                locale={locale}
                redirectToHome={true}
                client:load
              />
            </div>

            <div class="mt-6 pt-6 border-t border-border">
              <h3 class="text-sm font-medium mb-2">{t("service.share")}</h3>
              <div class="flex gap-2">
                <button
                  class="p-2 rounded-full bg-secondary hover:bg-secondary/80 transition-colors"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    ><path
                      d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"
                    ></path></svg
                  >
                </button>
                <button
                  class="p-2 rounded-full bg-secondary hover:bg-secondary/80 transition-colors"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    ><path
                      d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"
                    ></path></svg
                  >
                </button>
                <button
                  class="p-2 rounded-full bg-secondary hover:bg-secondary/80 transition-colors"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    ><rect x="2" y="2" width="20" height="20" rx="5" ry="5"
                    ></rect><path
                      d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"
                    ></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"
                    ></line></svg
                  >
                </button>
                <button
                  class="p-2 rounded-full bg-secondary hover:bg-secondary/80 transition-colors"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    ><path
                      d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
                    ></path><rect x="2" y="9" width="4" height="12"
                    ></rect><circle cx="4" cy="4" r="2"></circle></svg
                  >
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Servicios relacionados - Solo mostrar si hay servicios relacionados -->
      {filteredRelatedServices.length > 0 && (
        <div class="mt-12">
          <h2 class="text-2xl font-bold mb-6">{t("service.relatedServices")}</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {
              filteredRelatedServices.map((relatedService) => (
                <a
                  href={`/${locale}/${type}/${relatedService.id}`}
                  class="bg-card rounded-xl shadow-sm p-6 border border-border hover:shadow-md transition-all"
                >
                  <div class="flex justify-between items-start mb-4">
                    <h3 class="font-semibold">{relatedService.name}</h3>
                  </div>
                  <p class="text-sm text-muted-foreground mb-4 line-clamp-2">
                    {typeof relatedService.description === "object"
                      ? relatedService.description[locale]
                      : relatedService.description}
                  </p>
                </a>
              ))
            }
          </div>
        </div>
      )}
  </ServiceDetailContainer>
</Layout>
